import http.server
import ssl
import socketserver
import os

# --- Configuration ---
SERVER_ADDRESS = "0.0.0.0"  # Listen on all available network interfaces
PORT = 8443              # Port to use (make sure it's not already in use)
# !! IMPORTANT: Update these filenames if mkcert generated different ones !!
CERT_FILE = "localhost+2.pem"
KEY_FILE = "localhost+2-key.pem"
DIRECTORY = os.path.dirname(os.path.abspath(__file__)) # Serve files from script's directory
# --- End Configuration ---

# Ensure we are serving files from the correct directory
os.chdir(DIRECTORY)

# Use SimpleHTTPRequestHandler to serve files from the current directory
Handler = http.server.SimpleHTTPRequestHandler

print(f"Serving HTTPS on {SERVER_ADDRESS} port {PORT}...")
print(f"Using certificate: {CERT_FILE}")
print(f"Using key: {KEY_FILE}")
print(f"Serving files from: {DIRECTORY}")
print("-" * 30)
print(f"Access locally: https://localhost:{PORT}")
# Replace <YOUR_IP> below with your actual IP address
print(f"Access on network: https://<YOUR_IP>:{PORT}")
print("-" * 30)
print("Waiting for connections... Press Ctrl+C to stop.")


# Create a standard TCP server
httpd = socketserver.TCPServer((SERVER_ADDRESS, PORT), Handler)

# Create an SSL context
context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
try:
    # Load the certificate and key files generated by mkcert
    context.load_cert_chain(certfile=CERT_FILE, keyfile=KEY_FILE)
except FileNotFoundError:
    print("\n" + "="*40)
    print("ERROR: Certificate or key file not found!")
    print(f"Expected cert file: {os.path.join(DIRECTORY, CERT_FILE)}")
    print(f"Expected key file: {os.path.join(DIRECTORY, KEY_FILE)}")
    print("Please ensure you have run mkcert in this directory")
    print("and the filenames in the script match the generated files.")
    print("="*40)
    exit(1) # Exit if files are missing

# Wrap the server's socket with the SSL context
httpd.socket = context.wrap_socket(httpd.socket, server_side=True)

try:
    # Start the server
    httpd.serve_forever()
except KeyboardInterrupt:
    print("\nServer stopped.")
    httpd.server_close()
